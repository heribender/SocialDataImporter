# Configuration of global properties of Social data importer.

# the name of your site or organisation
sdi.target.name=Nena1

# the name of your site or organisation
sdi.target.weblink=http://my.domain

sdi.dry-run=true

# if you have custom property overrid classes in another package root than our project configure the
# package roots here which have to be inclueded in the search. Comma separated.
sdi.propertiesoverride.includeroot=

sdi.outputDir=./../output

# custom person keys
# comma delimited
# supply custom fields which are not covered by the standard keys in person.properties 
sdi.person.customkeys = person.whymember,person.fullName

#####################################
# Collectors
#####################################

sdi.collect.type = csv

# CSV collector
# *************

# name of the csv file
# either an absolute or a relative filepath
# A relative path is relative to <app-dir>/bin:
sdi.collect.csv.filename = ./../input/testImport_4_all_fields.csv

# the used delimiter.
sdi.collect.csv.delimiter = ;

# Comment character(s) which mark a line as commented out. 
sdi.collect.csv.comment.1 = #
sdi.collect.csv.comment.2 = //

# the encoding of the csv file
sdi.collect.csv.encoding=UTF-8

# Flag indicating if first row contains the field names
# true or false
sdi.collect.csv.headerrow = true

# Indicates the number of lines between the header and the data lines
# which have to been skipped
sdi.collect.csv.skipafterheader = 0

# comma delimited enumeration of the field names in the CSV file
# If headerrow is true this property is ignored. If headerrow is false, this property is mandatory. 
sdi.collect.csv.fieldnames =


###########################################
# Converters
# Specify a converter for particular fields
# 
###########################################

# Testfile uses: Screenname;Name;Middlename;Prename;email;birthday;entrydate;avatar;groups;sex

sdi.converter.birthday = toDate
sdi.converter.toDate.birthday.pattern = dd.MM.yy 
sdi.converter.entrydate = toDate
sdi.converter.toDate.entrydate.pattern = yyyy-MM-dd hh:mm

sdi.converter.sex = toGender
sdi.converter.toGender.male=m
sdi.converter.toGender.female=w
sdi.converter.toGender.dontcare=-

sdi.converter.groups = toNumberList
sdi.converter.avatar = toJpgFromHexDump

# number list (e.g. for group membership)
# example: "1/3/27/52"
sdi.converter.<fieldname> = toNumberList
sdi.converter.toNumberList.delimiter=/

# converter for boolean values
# Built in True values: true, on, yes, 1
# Built in False values: false, off, no, 0
# (ignoring upper/lower case)
# Other values can be defined here (see below)
sdi.converter.<fieldname> = toBoolean

# additional True values for the toBoolean converter
# (comma separated list)
sdi.converter.toBoolean.trueValues="ja","ok"

# additional False values for the toBoolean converter
# (comma separated list)
sdi.converter.toBoolean.falseValues="nein","NOK"

###########################################
# Collect filters
# Specify filters for filtering collected persons
# Filters can be applied before or after the raw data are parsed (pre or post).
# The order of applying a particular filter is defined by the ordinal number.
# Syntax:
#     <filterName>:<parameter(s)>
###########################################

# These filters can be applied after collecting the raw data of a new user
# on a defined field of the collected dataset.
# The trueField filter skips the row if the defined field is true.
# The falseField filter skips the row if the defined field is false.
# Note: the fieldname is the raw collection fieldname, not yet normalized.
sdi.collect.filter.1 = trueField:<fieldnameX>
sdi.collect.filter.2 = falseField:<fieldnameY>

###########################################
# Normalize filters
# Specify filters for particular fields of a dataset which are no more necessary
# in the normalize and target phase
# comma separated field list (field name of the raw dataset)
###########################################
sdi.normalize.ignoreField = <fieldname1>,<fieldname2>

###########################################
# Target
###########################################

# If false, a failure on a person leads to the abort, if true, the next person is processed
# (if sdi.dry-run is true, this setting is ignored and the application behaves as it would be true). 
sdi.target.ignoreFailedPerson = false

###########################################
# TargetJobs
###########################################


# sql job is applied on the persons fields which have been assigned
# to this job  (TODO: still used? DB-access is configured in persistence.xml)
sdi.target.job.sql = sql
sdi.target.job.sql.connectString = 
sdi.target.job.sql.user = 
sdi.target.job.sql.password = 

# ftp job is applied on the persons fields which have been assigned
# to this job 
sdi.targetjob.ftp = ftp
sdi.target.host=
sdi.targetjob.ftp.user =
sdi.targetjob.ftp.password =
sdi.targetjob.ftp.destinationDir = 
# FTP-CommandLine
# Usage: [options] <hostname> <username> <password>
# Options:
#  -a - use local active mode (default is local passive)
#  -A - anonymous login (omit username and password parameters)
#  -e - use EPSV with IPv4 (default false)
#  -k secs - use keep-alive timer (setControlKeepAliveTimeout)
#  -p true|false|protocol[,true|false] - use FTPSClient with the specified protocol and/or isImplicit setting
#  -w msec - wait time for keep-alive reply (setControlKeepAliveReplyTimeout)
#  -T  all|valid|none - use one of the built-in TrustManager implementations (none = JVM default)
#  -PrH server[:port] - HTTP Proxy host and optional port[80]
#  -PrU user - HTTP Proxy server username
#  -PrP password - HTTP Proxy server password
sdi.targetjob.ftp.cmdLine = ${sdi.target.host} ${sdi.targetjob.ftp.user} ${sdi.targetjob.ftp.password}  

#############################
# SSH 
sdi.ssh.user = ${sdi.targetjob.ftp.user}
sdi.ssh.password = ${sdi.targetjob.ftp.password}
sdi.ssh.port = 22

# if false (not recommended for production), the host certificate is not checked
sdi.ssh.checkcertificate=true


